import { Agent, AgentOptions } from "./agent";
import { ConversationMessage } from "../types";
interface BedrockTranslatorAgentOptions extends AgentOptions {
    sourceLanguage?: string;
    targetLanguage?: string;
    modelId?: string;
    inferenceConfig?: {
        maxTokens?: number;
        temperature?: number;
        topP?: number;
        stopSequences?: string[];
    };
}
export declare class BedrockTranslatorAgent extends Agent {
    private sourceLanguage?;
    private targetLanguage;
    private modelId;
    private client;
    private inferenceConfig;
    private tools;
    constructor(options: BedrockTranslatorAgentOptions);
    /**
   * Processes a user request by sending it to the Amazon Bedrock agent for processing.
   * @param inputText - The user input as a string.
   * @param userId - The ID of the user sending the request.
   * @param sessionId - The ID of the session associated with the conversation.
   * @param chatHistory - An array of Message objects representing the conversation history.
   * @param additionalParams - Optional additional parameters as key-value pairs.
   * @returns A Promise that resolves to a Message object containing the agent's response.
   */
    processRequest(inputText: string, userId: string, sessionId: string, chatHistory: ConversationMessage[], additionalParams?: Record<string, string>): Promise<ConversationMessage>;
    setSourceLanguage(language: string | undefined): void;
    setTargetLanguage(language: string): void;
}
export {};
