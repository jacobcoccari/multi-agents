"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LexBotAgent = void 0;
const agent_1 = require("./agent");
const types_1 = require("../types");
const client_lex_runtime_v2_1 = require("@aws-sdk/client-lex-runtime-v2");
const logger_1 = require("../utils/logger");
/**
 * LexBotAgent class for interacting with Amazon Lex Bot.
 * Extends the base Agent class.
 */
class LexBotAgent extends agent_1.Agent {
    /**
     * Constructor for LexBotAgent.
     * @param options - Configuration options for the Lex Bot agent
     */
    constructor(options) {
        super(options);
        this.lexClient = new client_lex_runtime_v2_1.LexRuntimeV2Client({ region: options.region });
        this.botId = options.botId;
        this.botAliasId = options.botAliasId;
        this.localeId = options.localeId;
        // Validate required fields
        if (!this.botId || !this.botAliasId || !this.localeId) {
            throw new Error("botId, botAliasId, and localeId are required for LexBotAgent");
        }
    }
    /**
     * Process a request to the Lex Bot.
     * @param inputText - The user's input text
     * @param userId - The ID of the user
     * @param sessionId - The ID of the current session
     * @param chatHistory - The history of the conversation
     * @param additionalParams - Any additional parameters to include
     * @returns A Promise resolving to a ConversationMessage containing the bot's response
     */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    async processRequest(inputText, userId, sessionId, chatHistory, additionalParams) {
        try {
            // Prepare the parameters for the Lex Bot request
            const params = {
                botId: this.botId,
                botAliasId: this.botAliasId,
                localeId: this.localeId,
                sessionId: sessionId,
                text: inputText,
                sessionState: {
                // You might want to maintain session state if needed
                },
            };
            // Create and send the command to the Lex Bot
            const command = new client_lex_runtime_v2_1.RecognizeTextCommand(params);
            const response = await this.lexClient.send(command);
            // Process the messages returned by Lex
            let concatenatedContent = '';
            if (response.messages && response.messages.length > 0) {
                concatenatedContent = response.messages
                    .map(message => message.content)
                    .filter(Boolean)
                    .join(' ');
            }
            // Construct and return the Message object
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [{ text: concatenatedContent || "No response from Lex bot." }],
            };
        }
        catch (error) {
            // Log the error and re-throw it
            logger_1.Logger.logger.error("Error processing request:", error);
            throw error;
        }
    }
}
exports.LexBotAgent = LexBotAgent;
//# sourceMappingURL=lexBotAgent.js.map