"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAIAgent = void 0;
const agent_1 = require("./agent");
const types_1 = require("../types");
const openai_1 = __importDefault(require("openai"));
const logger_1 = require("../utils/logger");
const DEFAULT_MAX_TOKENS = 1000;
class OpenAIAgent extends agent_1.Agent {
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(options);
        this.openai = new openai_1.default({ apiKey: options.apiKey });
        this.model = (_a = options.model) !== null && _a !== void 0 ? _a : types_1.OPENAI_MODEL_ID_GPT_O_MINI;
        this.streaming = (_b = options.streaming) !== null && _b !== void 0 ? _b : false;
        this.inferenceConfig = {
            maxTokens: (_d = (_c = options.inferenceConfig) === null || _c === void 0 ? void 0 : _c.maxTokens) !== null && _d !== void 0 ? _d : DEFAULT_MAX_TOKENS,
            temperature: (_e = options.inferenceConfig) === null || _e === void 0 ? void 0 : _e.temperature,
            topP: (_f = options.inferenceConfig) === null || _f === void 0 ? void 0 : _f.topP,
            stopSequences: (_g = options.inferenceConfig) === null || _g === void 0 ? void 0 : _g.stopSequences,
        };
    }
    /* eslint-disable @typescript-eslint/no-unused-vars */
    async processRequest(inputText, userId, sessionId, chatHistory, additionalParams) {
        const messages = [
            ...chatHistory.map(msg => {
                var _a;
                return ({
                    role: msg.role.toLowerCase(),
                    content: ((_a = msg.content[0]) === null || _a === void 0 ? void 0 : _a.text) || ''
                });
            }),
            { role: 'user', content: inputText }
        ];
        const { maxTokens, temperature, topP, stopSequences } = this.inferenceConfig;
        const requestOptions = {
            model: this.model,
            messages: messages,
            max_tokens: maxTokens,
            stream: this.streaming,
            temperature,
            top_p: topP,
            stop: stopSequences,
        };
        if (this.streaming) {
            return this.handleStreamingResponse(requestOptions);
        }
        else {
            return this.handleSingleResponse(requestOptions);
        }
    }
    async handleSingleResponse(input) {
        var _a, _b;
        try {
            const nonStreamingOptions = { ...input, stream: false };
            const chatCompletion = await this.openai.chat.completions.create(nonStreamingOptions);
            if (!chatCompletion.choices || chatCompletion.choices.length === 0) {
                throw new Error('No choices returned from OpenAI API');
            }
            const assistantMessage = (_b = (_a = chatCompletion.choices[0]) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.content;
            if (typeof assistantMessage !== 'string') {
                throw new Error('Unexpected response format from OpenAI API');
            }
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [{ text: assistantMessage }],
            };
        }
        catch (error) {
            logger_1.Logger.logger.error('Error in OpenAI API call:', error);
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [{ text: 'I encountered an error while processing your request.' }],
            };
        }
    }
    async *handleStreamingResponse(options) {
        var _a, _b;
        const stream = await this.openai.chat.completions.create({ ...options, stream: true });
        for await (const chunk of stream) {
            const content = (_b = (_a = chunk.choices[0]) === null || _a === void 0 ? void 0 : _a.delta) === null || _b === void 0 ? void 0 : _b.content;
            if (content) {
                yield content;
            }
        }
    }
}
exports.OpenAIAgent = OpenAIAgent;
//# sourceMappingURL=openAIAgent.js.map