"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockTranslatorAgent = void 0;
const agent_1 = require("./agent");
const types_1 = require("../types");
const client_bedrock_runtime_1 = require("@aws-sdk/client-bedrock-runtime");
const logger_1 = require("../utils/logger");
function isToolInput(input) {
    return (typeof input === 'object' &&
        input !== null &&
        'translation' in input);
}
class BedrockTranslatorAgent extends agent_1.Agent {
    constructor(options) {
        super(options);
        this.tools = [
            {
                toolSpec: {
                    name: "Translate",
                    description: "Translate text to target language",
                    inputSchema: {
                        json: {
                            type: "object",
                            properties: {
                                translation: {
                                    type: "string",
                                    description: "The translated text",
                                },
                            },
                            required: ["translation"],
                        },
                    },
                },
            },
        ];
        this.sourceLanguage = options.sourceLanguage;
        this.targetLanguage = options.targetLanguage || 'English';
        this.modelId = options.modelId || types_1.BEDROCK_MODEL_ID_CLAUDE_3_HAIKU;
        this.client = new client_bedrock_runtime_1.BedrockRuntimeClient({ region: options.region });
        this.inferenceConfig = options.inferenceConfig || {};
    }
    /**
   * Processes a user request by sending it to the Amazon Bedrock agent for processing.
   * @param inputText - The user input as a string.
   * @param userId - The ID of the user sending the request.
   * @param sessionId - The ID of the session associated with the conversation.
   * @param chatHistory - An array of Message objects representing the conversation history.
   * @param additionalParams - Optional additional parameters as key-value pairs.
   * @returns A Promise that resolves to a Message object containing the agent's response.
   */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    async processRequest(inputText, userId, sessionId, chatHistory, additionalParams) {
        // Check if input is a number
        if (!isNaN(Number(inputText))) {
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [{ text: inputText }],
            };
        }
        const userMessage = {
            role: types_1.ParticipantRole.USER,
            content: [{ text: `<userinput>${inputText}</userinput>` }],
        };
        let systemPrompt = `You are a translator. Translate the text within the <userinput> tags`;
        if (this.sourceLanguage) {
            systemPrompt += ` from ${this.sourceLanguage} to ${this.targetLanguage}`;
        }
        else {
            systemPrompt += ` to ${this.targetLanguage}`;
        }
        systemPrompt += `. Only provide the translation using the Translate tool.`;
        const converseCmd = {
            modelId: this.modelId,
            messages: [userMessage],
            system: [{ text: systemPrompt }],
            toolConfig: {
                tools: this.tools,
                toolChoice: {
                    tool: {
                        name: "Translate",
                    },
                },
            },
            inferenceConfiguration: {
                maximumTokens: this.inferenceConfig.maxTokens,
                temperature: this.inferenceConfig.temperature,
                topP: this.inferenceConfig.topP,
                stopSequences: this.inferenceConfig.stopSequences,
            },
        };
        try {
            const command = new client_bedrock_runtime_1.ConverseCommand(converseCmd);
            const response = await this.client.send(command);
            if (!response.output) {
                throw new Error("No output received from Bedrock model");
            }
            if (response.output.message.content) {
                const responseContentBlocks = response.output.message
                    .content;
                for (const contentBlock of responseContentBlocks) {
                    if ("toolUse" in contentBlock) {
                        const toolUse = contentBlock.toolUse;
                        if (!toolUse) {
                            throw new Error("No tool use found in the response");
                        }
                        if (!isToolInput(toolUse.input)) {
                            throw new Error("Tool input does not match expected structure");
                        }
                        if (typeof toolUse.input.translation !== 'string') {
                            throw new Error("Translation is not a string");
                        }
                        return {
                            role: types_1.ParticipantRole.ASSISTANT,
                            content: [{ text: toolUse.input.translation }],
                        };
                    }
                }
            }
            throw new Error("No valid tool use found in the response");
        }
        catch (error) {
            logger_1.Logger.logger.error("Error processing translation request:", error);
            throw error;
        }
    }
    setSourceLanguage(language) {
        this.sourceLanguage = language;
    }
    setTargetLanguage(language) {
        this.targetLanguage = language;
    }
}
exports.BedrockTranslatorAgent = BedrockTranslatorAgent;
//# sourceMappingURL=bedrockTranslatorAgent.js.map