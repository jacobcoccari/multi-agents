"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonBedrockAgent = void 0;
const client_bedrock_agent_runtime_1 = require("@aws-sdk/client-bedrock-agent-runtime");
const types_1 = require("../types");
const agent_1 = require("./agent");
const logger_1 = require("../utils/logger");
/**
 * Represents an Amazon Bedrock agent that interacts with a runtime client.
 * Extends base Agent class and implements specific methods for Amazon Bedrock.
 */
class AmazonBedrockAgent extends agent_1.Agent {
    /**
     * Constructs an instance of AmazonBedrockAgent with the specified options.
     * Initializes the agent ID, agent alias ID, and creates a new Bedrock agent runtime client.
     * @param options - Options to configure the Amazon Bedrock agent.
     */
    constructor(options) {
        super(options);
        this.agentId = options.agentId;
        this.agentAliasId = options.agentAliasId;
        this.client = options.client ? options.client : options.region
            ? new client_bedrock_agent_runtime_1.BedrockAgentRuntimeClient({ region: options.region })
            : new client_bedrock_agent_runtime_1.BedrockAgentRuntimeClient();
    }
    /**
     * Processes a user request by sending it to the Amazon Bedrock agent for processing.
     * @param inputText - The user input as a string.
     * @param userId - The ID of the user sending the request.
     * @param sessionId - The ID of the session associated with the conversation.
     * @param chatHistory - An array of Message objects representing the conversation history.
     * @param additionalParams - Optional additional parameters as key-value pairs.
     * @returns A Promise that resolves to a Message object containing the agent's response.
     */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    async processRequest(inputText, userId, sessionId, chatHistory, additionalParams) {
        // Construct the command to invoke the Amazon Bedrock agent with user input
        const command = new client_bedrock_agent_runtime_1.InvokeAgentCommand({
            agentId: this.agentId,
            agentAliasId: this.agentAliasId,
            sessionId,
            inputText
        });
        try {
            let completion = "";
            const response = await this.client.send(command);
            // Process the response from the Amazon Bedrock agent
            if (response.completion === undefined) {
                throw new Error("Completion is undefined");
            }
            // Aggregate chunks of response data
            for await (const chunkEvent of response.completion) {
                if (chunkEvent.chunk) {
                    const chunk = chunkEvent.chunk;
                    const decodedResponse = new TextDecoder("utf-8").decode(chunk.bytes);
                    completion += decodedResponse;
                }
                else {
                    logger_1.Logger.logger.warn("Received a chunk event with no chunk data");
                }
            }
            // Return the completed response as a Message object
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [{ text: completion }],
            };
        }
        catch (err) {
            // Handle errors encountered while invoking the Amazon Bedrock agent
            logger_1.Logger.logger.error(err);
            // Return a default error message as a fallback response
            return {
                role: types_1.ParticipantRole.ASSISTANT,
                content: [
                    {
                        text: "Sorry, I encountered an error while processing your request.",
                    },
                ],
            };
        }
    }
}
exports.AmazonBedrockAgent = AmazonBedrockAgent;
//# sourceMappingURL=amazonBedrockAgent.js.map