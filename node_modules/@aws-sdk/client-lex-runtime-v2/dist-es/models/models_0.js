import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { LexRuntimeV2ServiceException as __BaseException } from "./LexRuntimeV2ServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const ConfirmationState = {
    CONFIRMED: "Confirmed",
    DENIED: "Denied",
    NONE: "None",
};
export const Shape = {
    COMPOSITE: "Composite",
    LIST: "List",
    SCALAR: "Scalar",
};
export const IntentState = {
    FAILED: "Failed",
    FULFILLED: "Fulfilled",
    FULFILLMENT_IN_PROGRESS: "FulfillmentInProgress",
    IN_PROGRESS: "InProgress",
    READY_FOR_FULFILLMENT: "ReadyForFulfillment",
    WAITING: "Waiting",
};
export const InterpretationSource = {
    BEDROCK: "Bedrock",
    LEX: "Lex",
};
export const SentimentType = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
export const MessageContentType = {
    CUSTOM_PAYLOAD: "CustomPayload",
    IMAGE_RESPONSE_CARD: "ImageResponseCard",
    PLAIN_TEXT: "PlainText",
    SSML: "SSML",
};
export const StyleType = {
    DEFAULT: "Default",
    SPELL_BY_LETTER: "SpellByLetter",
    SPELL_BY_WORD: "SpellByWord",
};
export const DialogActionType = {
    CLOSE: "Close",
    CONFIRM_INTENT: "ConfirmIntent",
    DELEGATE: "Delegate",
    ELICIT_INTENT: "ElicitIntent",
    ELICIT_SLOT: "ElicitSlot",
    NONE: "None",
};
export class BadGatewayException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadGatewayException",
            $fault: "server",
            ...opts,
        });
        this.name = "BadGatewayException";
        this.$fault = "server";
        Object.setPrototypeOf(this, BadGatewayException.prototype);
    }
}
export class DependencyFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "DependencyFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DependencyFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DependencyFailedException.prototype);
    }
}
export const ConversationMode = {
    AUDIO: "AUDIO",
    TEXT: "TEXT",
};
export const InputMode = {
    DTMF: "DTMF",
    SPEECH: "Speech",
    TEXT: "Text",
};
export const PlaybackInterruptionReason = {
    DTMF_START_DETECTED: "DTMF_START_DETECTED",
    TEXT_DETECTED: "TEXT_DETECTED",
    VOICE_START_DETECTED: "VOICE_START_DETECTED",
};
export var StartConversationRequestEventStream;
(function (StartConversationRequestEventStream) {
    StartConversationRequestEventStream.visit = (value, visitor) => {
        if (value.ConfigurationEvent !== undefined)
            return visitor.ConfigurationEvent(value.ConfigurationEvent);
        if (value.AudioInputEvent !== undefined)
            return visitor.AudioInputEvent(value.AudioInputEvent);
        if (value.DTMFInputEvent !== undefined)
            return visitor.DTMFInputEvent(value.DTMFInputEvent);
        if (value.TextInputEvent !== undefined)
            return visitor.TextInputEvent(value.TextInputEvent);
        if (value.PlaybackCompletionEvent !== undefined)
            return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);
        if (value.DisconnectionEvent !== undefined)
            return visitor.DisconnectionEvent(value.DisconnectionEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StartConversationRequestEventStream || (StartConversationRequestEventStream = {}));
export var StartConversationResponseEventStream;
(function (StartConversationResponseEventStream) {
    StartConversationResponseEventStream.visit = (value, visitor) => {
        if (value.PlaybackInterruptionEvent !== undefined)
            return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);
        if (value.TranscriptEvent !== undefined)
            return visitor.TranscriptEvent(value.TranscriptEvent);
        if (value.IntentResultEvent !== undefined)
            return visitor.IntentResultEvent(value.IntentResultEvent);
        if (value.TextResponseEvent !== undefined)
            return visitor.TextResponseEvent(value.TextResponseEvent);
        if (value.AudioResponseEvent !== undefined)
            return visitor.AudioResponseEvent(value.AudioResponseEvent);
        if (value.HeartbeatEvent !== undefined)
            return visitor.HeartbeatEvent(value.HeartbeatEvent);
        if (value.AccessDeniedException !== undefined)
            return visitor.AccessDeniedException(value.AccessDeniedException);
        if (value.ResourceNotFoundException !== undefined)
            return visitor.ResourceNotFoundException(value.ResourceNotFoundException);
        if (value.ValidationException !== undefined)
            return visitor.ValidationException(value.ValidationException);
        if (value.ThrottlingException !== undefined)
            return visitor.ThrottlingException(value.ThrottlingException);
        if (value.InternalServerException !== undefined)
            return visitor.InternalServerException(value.InternalServerException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.DependencyFailedException !== undefined)
            return visitor.DependencyFailedException(value.DependencyFailedException);
        if (value.BadGatewayException !== undefined)
            return visitor.BadGatewayException(value.BadGatewayException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StartConversationResponseEventStream || (StartConversationResponseEventStream = {}));
export const ActiveContextFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.contextAttributes && { contextAttributes: SENSITIVE_STRING }),
});
export const MessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: SENSITIVE_STRING }),
});
export const PutSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecognizeUtteranceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessionState && { sessionState: SENSITIVE_STRING }),
    ...(obj.requestAttributes && { requestAttributes: SENSITIVE_STRING }),
});
export const RecognizeUtteranceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DTMFInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inputCharacter && { inputCharacter: SENSITIVE_STRING }),
});
export const TextInputEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: SENSITIVE_STRING }),
});
export const TextResponseEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),
});
export const SessionStateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.activeContexts && {
        activeContexts: obj.activeContexts.map((item) => ActiveContextFilterSensitiveLog(item)),
    }),
});
export const ConfigurationEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.welcomeMessages && { welcomeMessages: obj.welcomeMessages.map((item) => MessageFilterSensitiveLog(item)) }),
});
export const PutSessionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),
});
export const RecognizeTextRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: SENSITIVE_STRING }),
});
export const StartConversationRequestEventStreamFilterSensitiveLog = (obj) => {
    if (obj.ConfigurationEvent !== undefined)
        return { ConfigurationEvent: ConfigurationEventFilterSensitiveLog(obj.ConfigurationEvent) };
    if (obj.AudioInputEvent !== undefined)
        return { AudioInputEvent: obj.AudioInputEvent };
    if (obj.DTMFInputEvent !== undefined)
        return { DTMFInputEvent: DTMFInputEventFilterSensitiveLog(obj.DTMFInputEvent) };
    if (obj.TextInputEvent !== undefined)
        return { TextInputEvent: TextInputEventFilterSensitiveLog(obj.TextInputEvent) };
    if (obj.PlaybackCompletionEvent !== undefined)
        return { PlaybackCompletionEvent: obj.PlaybackCompletionEvent };
    if (obj.DisconnectionEvent !== undefined)
        return { DisconnectionEvent: obj.DisconnectionEvent };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const StartConversationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.requestEventStream && { requestEventStream: "STREAMING_CONTENT" }),
});
export const GetSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),
});
export const IntentResultEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecognizeTextResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.messages && { messages: obj.messages.map((item) => MessageFilterSensitiveLog(item)) }),
});
export const StartConversationResponseEventStreamFilterSensitiveLog = (obj) => {
    if (obj.PlaybackInterruptionEvent !== undefined)
        return { PlaybackInterruptionEvent: obj.PlaybackInterruptionEvent };
    if (obj.TranscriptEvent !== undefined)
        return { TranscriptEvent: obj.TranscriptEvent };
    if (obj.IntentResultEvent !== undefined)
        return { IntentResultEvent: IntentResultEventFilterSensitiveLog(obj.IntentResultEvent) };
    if (obj.TextResponseEvent !== undefined)
        return { TextResponseEvent: TextResponseEventFilterSensitiveLog(obj.TextResponseEvent) };
    if (obj.AudioResponseEvent !== undefined)
        return { AudioResponseEvent: obj.AudioResponseEvent };
    if (obj.HeartbeatEvent !== undefined)
        return { HeartbeatEvent: obj.HeartbeatEvent };
    if (obj.AccessDeniedException !== undefined)
        return { AccessDeniedException: obj.AccessDeniedException };
    if (obj.ResourceNotFoundException !== undefined)
        return { ResourceNotFoundException: obj.ResourceNotFoundException };
    if (obj.ValidationException !== undefined)
        return { ValidationException: obj.ValidationException };
    if (obj.ThrottlingException !== undefined)
        return { ThrottlingException: obj.ThrottlingException };
    if (obj.InternalServerException !== undefined)
        return { InternalServerException: obj.InternalServerException };
    if (obj.ConflictException !== undefined)
        return { ConflictException: obj.ConflictException };
    if (obj.DependencyFailedException !== undefined)
        return { DependencyFailedException: obj.DependencyFailedException };
    if (obj.BadGatewayException !== undefined)
        return { BadGatewayException: obj.BadGatewayException };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const StartConversationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.responseEventStream && { responseEventStream: "STREAMING_CONTENT" }),
});
