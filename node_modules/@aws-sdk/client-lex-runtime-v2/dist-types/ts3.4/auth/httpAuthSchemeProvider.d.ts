import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { LexRuntimeV2ClientResolvedConfig } from "../LexRuntimeV2Client";
export interface LexRuntimeV2HttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface LexRuntimeV2HttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    LexRuntimeV2ClientResolvedConfig,
    HandlerExecutionContext,
    LexRuntimeV2HttpAuthSchemeParameters,
    object
  > {}
export declare const defaultLexRuntimeV2HttpAuthSchemeParametersProvider: (
  config: LexRuntimeV2ClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<LexRuntimeV2HttpAuthSchemeParameters>;
export interface LexRuntimeV2HttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<LexRuntimeV2HttpAuthSchemeParameters> {}
export declare const defaultLexRuntimeV2HttpAuthSchemeProvider: LexRuntimeV2HttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: LexRuntimeV2HttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: LexRuntimeV2HttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
